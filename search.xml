<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Django</title>
      <link href="/2022/09/24/docker/"/>
      <url>/2022/09/24/docker/</url>
      
        <content type="html"><![CDATA[<p>现在有很多的web框架，我选择使用python的django框架，主要是看重他开发效率高这一点</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h4><p>指的是写独立后端,这样就可以配置多个前端(方便捏)</p><h4 id="分文件编写"><a href="#分文件编写" class="headerlink" title="分文件编写"></a>分文件编写</h4><p>这样可以使用 继承 ，提高可读性，降低项目耦合度 </p><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>分文件编写确实利于开发,但是不利于渲染,浏览器打开一个JS的速度高于打开多个JS,所以份文件编写之后用Shell脚本实现一个打包，将所有JS打包到一块去,这其实就是头文件的链接</p><h3 id="项目浮沉"><a href="#项目浮沉" class="headerlink" title="项目浮沉"></a>项目浮沉</h3><h4 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h4><p>JavaScript写前端总是会遇到玄幻的bug,这个一般通过 console.log 去打印调试,还有就是调用一些api需要检查拼写错误</p><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><p>这个常见是在调试的时候没有清除 浏览器缓存 (在开启开发人员工具的情况下,右键刷新 点击 “清空缓存进行过硬刷新”)</p><h4 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h4><p>在阿里云通过学生云加速计划，白嫖了一台 1C2G 的ECS云服务器，但是在使用vscode远程开发的时候出现过SSH连接失效,提交工单后说是云盘io激增导致Linux假死，以至于SSH连接缓慢。</p><p>—&gt;  在华为云嫖了一台2C4G的服务器解决,侧面证明是因为服务器内存太小导致的</p><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><p>这个是做个网关入口时候会遇到的(Gateway),这里面的配置文件需要配置相应的位置和Django的宏</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随想录</title>
      <link href="/2022/09/15/moon/"/>
      <url>/2022/09/15/moon/</url>
      
        <content type="html"><![CDATA[<h2 id="随想录"><a href="#随想录" class="headerlink" title="随想录"></a>随想录</h2><p>经过一年的CS学习,你发现你以为的大海其实是浩瀚的宇宙。而自己也从仰望月亮的人，逐渐变成弯腰注视那六便士的人。希望以后的学习过程中心中的明月依在。</p><h3 id="图形学"><a href="#图形学" class="headerlink" title="图形学"></a>图形学</h3><p><a href="https://github.com/cadenji/foolrenderer">https://github.com/cadenji/foolrenderer</a><br>foolrenderer这个项目有图形学的学习路线和渲染器</p><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><p><a href="https://github.com/rccoder/HIT-Computer-Network">https://github.com/rccoder/HIT-Computer-Network</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tutorial</title>
      <link href="/2022/09/05/tutorial/"/>
      <url>/2022/09/05/tutorial/</url>
      
        <content type="html"><![CDATA[<h2 id="学习Linux的基础命令"><a href="#学习Linux的基础命令" class="headerlink" title="学习Linux的基础命令"></a>学习Linux的基础命令</h2><p>实验环境: 在Windows安装Git Bash 来实践(如果有安装Linux虚拟机或者Linux就更好了)</p><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><font color="#10aec2">pwd</font></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;打印当前路径$ pwd&#x2F;c&#x2F;Users&#x2F;LiJia</code></pre><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a><font color="#10aec2">ls</font></h3><p>-lh 可以输出更详细的东西 </p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;可以列出当前路径下的所有文件$ lsAppData&#x2F;Application DataContacts&#x2F;</code></pre><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><font color="#10aec2">mkdir</font></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;可以创建一个文件夹$ mkdir test$ lstest</code></pre><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a><font color="#10aec2">rmdir</font></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;可以删除一个空文件夹$ rmdir test$ ls</code></pre><h3 id="rm-rf"><a href="#rm-rf" class="headerlink" title="rm-rf"></a><font color="#10aec2">rm-rf</font></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;可以删除一个文件夹(递归删除子目录)  删库命令$ rmdir test$ ls</code></pre><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a><font color="#10aec2">touch</font></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;创建一个文件$ rmdir test$ ls -lhtotal 0-rw-r--r-- 1 LiJia 197121 0 Sep  6 00:11 test</code></pre><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a><font color="#10aec2">rm</font></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;删除文件$ rm test$ ls</code></pre><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a><font color="#10aec2">vim</font></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;可以写入一个文件$ touch hello.c$ vim hello.c</code></pre><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a><font color="#10aec2">cat</font></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;可以打印一个文件的内容$ cat hello.c$ ....</code></pre><h2 id="编写-ssh-config"><a href="#编写-ssh-config" class="headerlink" title="编写.ssh/config"></a>编写.ssh/config</h2><pre class="language-none"><code class="language-none">$ cd .ssh$ touch configHost wiki         HostName 47.113.222.66        User acs &#x2F;&#x2F;      Port  10000     (一般不需要)</code></pre><p>之后只需要 ssh-copy-id wiki 就能实现免密ssh登录服务器了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何科学上网？</title>
      <link href="/2022/06/27/vpn/"/>
      <url>/2022/06/27/vpn/</url>
      
        <content type="html"><![CDATA[<h2 id="安装代理工具"><a href="#安装代理工具" class="headerlink" title="安装代理工具"></a>安装代理工具</h2><p>这里我是用的是<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">clash</a>(clash for windows ) , 你也可以选择如V2rayN这样的代理工具。</p><ul><li>点击clash可以跳转到对应github</li></ul><h5 id="点击Releases-下载喜欢的版本"><a href="#点击Releases-下载喜欢的版本" class="headerlink" title="点击Releases 下载喜欢的版本"></a>点击Releases 下载喜欢的版本</h5><p><img src="/2022/06/27/vpn/1.png">    </p><h5 id="解压完成安装后将你的订阅复制"><a href="#解压完成安装后将你的订阅复制" class="headerlink" title="解压完成安装后将你的订阅复制"></a>解压完成安装后将你的订阅复制</h5><p>(至于订阅的获取自行搜索)<br><img src="/2022/06/27/vpn/2.png"></p><h2 id="使用火狐浏览器"><a href="#使用火狐浏览器" class="headerlink" title="使用火狐浏览器"></a>使用火狐浏览器</h2><ul><li>笔者出现过其他浏览器无法自动代理的问题</li></ul><p>在clash界面复制端口，并开启代理(变绿的按钮)<br><img src="/2022/06/27/vpn/3.png"></p><p>打开火狐浏览器 –&gt; 点击设置 –&gt; 搜索代理 —&gt; 如图更改(端口要和clash主页的一致)<br><img src="/2022/06/27/vpn/4.png"></p><h2 id="至此配置完毕"><a href="#至此配置完毕" class="headerlink" title="至此配置完毕!"></a>至此配置完毕!</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Windows下手写Makefile</title>
      <link href="/2022/06/03/compile/"/>
      <url>/2022/06/03/compile/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在windows下写makefile并完成编译"><a href="#如何在windows下写makefile并完成编译" class="headerlink" title="如何在windows下写makefile并完成编译"></a>如何在windows下写makefile并完成编译</h1><p>“在Linux下我们一般通过gcc和makefile完成编译，Windows下C/C++的编译一般使用的是IDE集成的编译器，或者Cmake。”</p><p><strong>但我就是要用最古老的方法 = = </strong></p><h1 id="1-安装Mingw-get"><a href="#1-安装Mingw-get" class="headerlink" title="1. 安装Mingw-get"></a>1. 安装Mingw-get</h1><ul><li><p>这里推荐使用bing作为搜索引擎,直接搜索Mingw-get<br><img src="/2022/06/03/compile/1.png"><br>打开网页，点击绿色的download下载，然后完成安装，最后添加安装地址的bin目录到系统环境变量。</p></li><li><p>然后打开cmd</p><pre class="language-zash" data-language="zash"><code class="language-zash">mingw-get install mingw32-make</code></pre></li></ul><p>然后将mingw32-make名字重命名为make<br><img src="/2022/06/03/compile/2.png"></p><p>这样在有makefile的文件夹下面打开cmd/任意的shell </p><pre class="language-git" data-language="git"><code class="language-git">make</code></pre><p><img src="/2022/06/03/compile/3.png"></p><p>就能成功编译了！(值得注意的是，如果系统内没用gcc/g++ make会报错)</p><ul><li>此时文件夹内就生成了.exe的可执行文件<br><img src="/2022/06/03/compile/4.png"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无知</title>
      <link href="/2022/05/05/plus/"/>
      <url>/2022/05/05/plus/</url>
      
        <content type="html"><![CDATA[<h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p><img src="/2022/05/05/plus/1.png"></p><p>这里的  -“A” 目的是让数组里面的 ‘ ‘ 转换后的值不超过26<br>eg.   ‘B’ = 66  所以 ‘B’ - ‘A’ =1 即 symbolValues[1]</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>初始化<pre class="language-C" data-language="C"><code class="language-C">int arr[6] &#x3D; &#123;0,0,0,0,0,212&#125;; &#x2F;&#x2F; 传统的语法int arr[6] &#x3D; &#123;[5] &#x3D; 212&#125;; &#x2F;&#x2F; 把arr[5]初始化为212</code></pre>[4] = 31,30,31，那么 后面这些值将被用于初始化指定元素后面的元素。也就是说，在days[4]被初 始化为31后，days[5]和days[6]将分别被初始化为30和31。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo_bugs</title>
      <link href="/2022/05/04/hexo-bugs/"/>
      <url>/2022/05/04/hexo-bugs/</url>
      
        <content type="html"><![CDATA[<p>最近搭建了基于hexo框架的个人博客，碰壁多次，<br>网上的解决方法很多都是错的，头铁的话容易睡不着觉<br>这里我将分享一些我遇到的头痛问题</p><h2 id="hexo-init-报错"><a href="#hexo-init-报错" class="headerlink" title="hexo init 报错"></a>hexo init 报错</h2><p><img src="/2022/05/04/hexo-bugs/1.png"></p><p>这个可以可以用</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo init blog</code></pre><p>最后的blog就是你初始化hexo，他会自己创建的文件夹的名字</p><h2 id="hexo-d-报错"><a href="#hexo-d-报错" class="headerlink" title="hexo d 报错"></a>hexo d 报错</h2><h2 id="将博客上传github，连接超时"><a href="#将博客上传github，连接超时" class="headerlink" title="将博客上传github，连接超时"></a>将博客上传github，连接超时</h2><p><img src="/2022/05/04/hexo-bugs/2.jpg"></p><p>这个一般是hexo配置文件的问题</p><ul><li><p>首先找到hexo配置文件<br>  我的是D:\Blog\ _config.yml</p></li><li><p>网上很多更改配置文件如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">deploy:    type: git    repo: ********(你GitHub仓库网址)    branch: master</code></pre><p>但是其实随着GitHub更新，master 分支已经失效</p></li></ul><h3 id="正确的是："><a href="#正确的是：" class="headerlink" title="正确的是："></a>正确的是：</h3><pre class="language-bash" data-language="bash"><code class="language-bash">deploy:    type: git    repo: ********(你GitHub仓库网址) &#x2F;&#x2F;这里最好使用ssh连接,https会有概率连不上    branch: main</code></pre><ul><li>在搭建完毕之后也可能出现这样的问题,博主的解决方式是修改本地hosts文件<br>在（C:\Windows\System32\drivers\etc）里面的hosts添加一行<pre class="language-zash" data-language="zash"><code class="language-zash">20.205.243.166              github.com</code></pre>解决！</li></ul><h2 id="hexo-代码块异常"><a href="#hexo-代码块异常" class="headerlink" title="hexo 代码块异常"></a>hexo 代码块异常</h2><p><img src="/2022/05/04/hexo-bugs/3.png"></p><p><strong>blod 同样是修改hexo配置文件:</strong><br><img src="/2022/05/04/hexo-bugs/4.png"></p><h2 id="hexo上传图片无法显示"><a href="#hexo上传图片无法显示" class="headerlink" title="hexo上传图片无法显示"></a>hexo上传图片无法显示</h2><p><img src="/2022/05/04/hexo-bugs/5.png"></p><p>这个问题网上基本没有对的</p><ul><li>首先更改hexo配置文件<br>  ctrl + f 搜索  post_asset_folder</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">post_asset_folder: true </code></pre><p>其作用就是你在Git上     hexo new abc<br>他会创建一个 abc.md 的同时创建一个叫 abc 的文件夹(存放图片)</p><ul><li>接着用 <pre class="language-bash" data-language="bash"><code class="language-bash">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image</code></pre>如果按网上装了其他插件记得 npm uninstall </li></ul><p>也可以看这个大佬的<a href="https://www.bilibili.com/video/BV1D7411U7Yk?spm_id_from=333.999.0.0">视频</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
