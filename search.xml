<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git</title>
      <link href="/2022/05/17/Git/"/>
      <url>/2022/05/17/Git/</url>
      
        <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h2 id="1-配置实验环境"><a href="#1-配置实验环境" class="headerlink" title="1. 配置实验环境"></a>1. 配置实验环境</h2><ul><li><h2 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h2><pre class="language-bash" data-language="bash"><code class="language-bash">https://registry.npmmirror.com/binary.html</code></pre><p>这里推荐淘宝镜像源安装</p></li><li><h2 id="配置git-config"><a href="#配置git-config" class="headerlink" title="配置git.config"></a>配置git.config</h2><p>  进入用户目录找到.gitconfig文件,配置如下</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"此处填写你注册时的用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"此处填写你注册时的邮箱"</span><span class="token comment"># 一般只要不报错，可以跳过下面寻找.gitconfig文件</span></code></pre><p>会生成一下文字:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user<span class="token punctuation">]</span>name  <span class="token operator">=</span> <span class="token string">"XXX"</span>email <span class="token operator">=</span> <span class="token string">"XXX@qq.com"</span></code></pre><ul><li><h2 id="建立SSH连接"><a href="#建立SSH连接" class="headerlink" title="建立SSH连接"></a>建立SSH连接</h2><ul><li>再桌面右键 Git bash here <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.ssh  </code></pre>如果报错就:  ssh-keygen -t rsa -C “邮箱” ，然后连着三个回车</li></ul><p>  生成两个文件： id_rsa id_rsa.pub 存放在 C:\Users\admin.ssh 文件夹下<br>  复制 id_rsa.pub里面的内容</p><p>  打开github.com –&gt; 注册账号 –&gt; 点击右上角头像</p></li><li><p>-&gt; 在下拉菜单找到 Settings  –&gt; 然后再左侧 点击SSH </p><p>   <img src="/2022/05/17/Git/1.png"></p><p>   然后复制 id_rsa.pub 进去 就能完成公钥的添加了！</p></li></ul><p><a href="http://git-school.github.io/visualizing-git/">http://git-school.github.io/visualizing-git/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git  笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无知</title>
      <link href="/2022/05/05/plus/"/>
      <url>/2022/05/05/plus/</url>
      
        <content type="html"><![CDATA[<h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p><img src="/2022/05/05/plus/1.png"></p><p>这里的  -“A” 目的是让数组里面的 ‘ ‘ 转换后的值不超过26<br>eg.   ‘B’ = 66  所以 ‘B’ - ‘A’ =1 即 symbolValues[1]</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>初始化<pre class="language-C" data-language="C"><code class="language-C">int arr[6] &#x3D; &#123;0,0,0,0,0,212&#125;; &#x2F;&#x2F; 传统的语法int arr[6] &#x3D; &#123;[5] &#x3D; 212&#125;; &#x2F;&#x2F; 把arr[5]初始化为212</code></pre>[4] = 31,30,31，那么 后面这些值将被用于初始化指定元素后面的元素。也就是说，在days[4]被初 始化为31后，days[5]和days[6]将分别被初始化为30和31。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo_bugs</title>
      <link href="/2022/05/04/hexo-bugs/"/>
      <url>/2022/05/04/hexo-bugs/</url>
      
        <content type="html"><![CDATA[<p>###最近搭建了基于hexo框架的个人博客，碰壁多次，<br>网上的解决方法很多都是错的，头铁的话容易睡不着觉<br>这里我将分享一些我遇到的头痛问题</p><h2 id="hexo-init-报错"><a href="#hexo-init-报错" class="headerlink" title="hexo init 报错"></a>hexo init 报错</h2><p><img src="/2022/05/04/hexo-bugs/1.png"></p><p>这个可以可以用</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo init blog</code></pre><p>最后的blog就是你初始化hexo，他会自己创建的文件夹的名字</p><h2 id="将博客上传github，连接超时"><a href="#将博客上传github，连接超时" class="headerlink" title="将博客上传github，连接超时"></a>将博客上传github，连接超时</h2><p><img src="/2022/05/04/hexo-bugs/2.jpg"></p><p>这个一般是hexo配置文件的问题</p><ul><li><p>首先找到hexo配置文件<br>  我的是D:\Blog\ _config.yml</p></li><li><p>网上很多更改配置文件如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">deploy:    type: <span class="token function">git</span>    repo: ********<span class="token punctuation">(</span>你GitHub仓库网址<span class="token punctuation">)</span>    branch: master</code></pre><p>但是其实随着GitHub更新，master 分支已经失效</p></li></ul><h3 id="正确的是："><a href="#正确的是：" class="headerlink" title="正确的是："></a>正确的是：</h3><pre class="language-bash" data-language="bash"><code class="language-bash">deploy:    type: <span class="token function">git</span>    repo: ********<span class="token punctuation">(</span>你GitHub仓库网址<span class="token punctuation">)</span>    branch: main</code></pre><h2 id="hexo-代码块异常"><a href="#hexo-代码块异常" class="headerlink" title="hexo 代码块异常"></a>hexo 代码块异常</h2><p><img src="/2022/05/04/hexo-bugs/3.png"></p><p><strong>blod 同样是修改hexo配置文件:</strong><br><img src="/2022/05/04/hexo-bugs/4.png"></p><h2 id="hexo上传图片无法显示"><a href="#hexo上传图片无法显示" class="headerlink" title="hexo上传图片无法显示"></a>hexo上传图片无法显示</h2><p><img src="/2022/05/04/hexo-bugs/5.png"></p><p>这个问题网上基本没有对的</p><ul><li>首先更改hexo配置文件<br>  ctrl + f 搜索  post_asset_folder</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">post_asset_folder: <span class="token boolean">true</span> </code></pre><p>其作用就是你在Git上     hexo new abc<br>他会创建一个 abc.md 的同时创建一个叫 abc 的文件夹(存放图片)</p><ul><li>接着用 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image</code></pre>如果按网上装了其他插件记得 npm uninstall </li></ul><p>也可以看这个大佬的<a href="https://www.bilibili.com/video/BV1D7411U7Yk?spm_id_from=333.999.0.0">视频</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
